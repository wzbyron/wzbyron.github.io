<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[爬虫基础]]></title>
    <url>%2F2018%2F07%2F28%2FSpidreBasic%2F</url>
    <content type="text"><![CDATA[HTTP基本原理URI：Uniform Resource Identifiter，统一资源标志符 URL：Universal Resource Locator，统一资源定位符 URL是URI的子集。 HTTP：Hyper Text Transfer Protocol，超文本传输协议 HTTPS：Hyper Text Transfer Protocol over Secure Socket Layer ，HTTP下加入SSL层 Name：请求的名称， 一般会将URL的最后一部分内容当做名称。 Status：响应的状态码。 Type：请求的文档类型。 Initiator：请求源，用来标记请求是由哪个对象或进程发起的。 Size：从服务器下载的文件和请求的资源大小。如果是从缓存中取得的资源，则该列表会显示from cache。 Time：发起请求到获取响应所用的总时间。 Waterfall：网络请求的可视化瀑布流。 请求 请求方法（Request Method） 方法 描述 GET 请求页面，并返回页面内容（常见） POST 大多用于提交表单或上传文件，数据包含在请求体中（常见） HEAD 类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头 PUT 从客户端向服务器传送的数据取代指定文档的内容 DELETE 请求服务器删除指定的页面 CONNECT 把服务器当作跳板，让服务器代替客户端访问其他页面 OPTIONS 允许客户端查看服务器的性能 TRACE 回显服务器收到的请求，主要用于测试或诊断 请求的网址（Request URL） 请求的网址，即统一资源定位符URL 请求头（Request Headers） 请求头，用来说明服务器要使用的附加信息。 Accept：请求报头域，用于指定客户端可接受哪些类型的信息； Accept-Language：指定客户端可接受的语言类型； Accep-Encoding：指定客户端可接受的内容编码； Host：用于指定请求资源的主机IP和端口号，其内容为请求URL的原始服务器或网关的位置。从HTTP 1.1版本开始，请求必须包含此内容。 Cookie：或Cookies，网站为了辨别用户进行会话跟踪而存错在用户本地的数据。功能为维持当前访问会话。 Referer：标识这个请求是从哪个页面发过来的。 User-Agent：使服务器识别客户使用的操作系统及版本、浏览器及版本等信息。 Content-Type：也叫互联网媒体类型（Internet Media Type）或者MIME类型，在HTTP协议消息头中，用来表示具体请求中的媒体类型信息。如：text/html代表HTML格式，image/gif代表GIF图片， application/json代表JSON类型。 请求体（Request Body） 请求体一般承载的内容是POST请求中的表单数据，而对于GET请求，请求体则为空。 Content-Type POST提交数据的方式 application/x-www-form-urlencoded 表单数据 multipart/form-data 表单文件上传 application/json 序列化JSON数据 text/xml XML数据 响应 响应状态码（Response Status Code） 服务器的响应状态，如200为服务器正常响应，404为页面未找到，500为服务器内部发生错误等 响应头（Response Headers） 包含了服务器对请求的应答信息。 Date：标识响应产生的时间。 Last-Modified：指定资源的最后修改时间。 Content-Encoding：指定响应内容的编码。 Server：包含服务器的信息，比如名称、版本号等。 Content-Type：文档类型，指定返回的数据类型。 Set-Cookie：设置Cookies。 Expires：指定响应的过期时间。 响应体（Response Body） 在浏览器开发者工具中点击Response，查看网页源代码，也就是响应体的内容。 网页基础网页可以分为三大部分——HTML、CSS和JavaScript。 在HTML中，只需要用link标签即可引入写好的CSS文件。 JavaScript在HTML中通过script标签引入。 一个网页的标准形式是html标签内嵌套head和body标签，head内定义网页配置和引用，body内定义网页正文。 本文内容为《Python3网络爬虫开发实战》 的学习笔记。]]></content>
      <tags>
        <tag>Python3</tag>
        <tag>Spider</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我不是药神，我想活着]]></title>
    <url>%2F2018%2F07%2F08%2FDying-to-Survive%2F</url>
    <content type="text"><![CDATA[最近这几天，朋友圈被一部《我不是药神》的国产电影刷屏了，各种大V推荐，豆瓣评分有9.0之高。正好周末清闲到电影院观看了，剧情很现实，也很具有感染力。故事主要内容是说一个被生活所迫、走投无路之人，因个人利益而走而挺险贩卖假药，也是根据2013年的陆勇“假药案”进行的改编。 但现实故事是，陆勇因为得了 “慢性粒细胞白血病”（一种影响血液及骨髓的恶性肿瘤 ），需要长期服用瑞士产“格列卫”的药品控制病情。但由于“格列卫”的药价昂贵（2.3万元一盒）和其他医疗支出，已经花费了陆勇家中大半资产。治疗费用的负担对于这个家庭越来越重，同时对于活着的希望，陆勇多方打听了解到印度“格列卫”（一种与瑞士“格列卫“药性相似度达99.9%的仿制药，价格却为4千元每盒，但在国内没有并禁止销售）的存在 。 陆勇在服用印度“格列卫”几月，确认药效后，在病友之间分享了自己的经历。此后就有病友寻求他的帮助，让他代购这些药品，自己则没有靠这个谋取利益。但在2013年陆勇因向网络银行卡贩卖团伙，购买了3张银行卡，以便与印度制药公司汇款转账，而被抓捕。一年后，沅江市检察院以妨害信用卡管理罪和销售假药罪对陆勇提起公诉 。 庭审期间，陆勇之前协助过的300多名白血病病友联名写信，请求司法机关对他免予刑事处罚 。最后司法机关认为其行为不构成犯罪，决定不起诉 。认为若陆勇的行为构成犯罪，将背离刑事司法应有的价值观。 电影剧情与现实出入较大，但都深刻体现出病友们买不起、吃不起国内正版药的无奈与绝望之情。他们到过药企闹过，相信医药骗子，为了活着，试过各种办法。好不容易有了能够治病的便宜药，结果还被警察抓，没收了所有药片。 剧中，在拘捕人中有位患病的老奶奶与警察有过这样一场对话，“ 我求求你别在追查印度药了行吗？我病了三年，四万块钱的一瓶药，我吃了三年后。房子吃没了，家人被我吃垮了，现在好不容易有了便宜药。你们非说它是假药。那药假不假我们能不知道吗？那药才500块钱一瓶药贩子根本不挣钱。谁家能不遇上个病人，你就能保证你这一辈子不生病吗？你把他抓走了，我们都得等死。我不想死，我想活着。行吗？”对于活着，人生来具有的基本权利，此时此刻却需要向他人进行肯求、央求，才能有希望得到。何等的无望呢。 如今，随着国家医疗改革的推进，医药行业也得到了好的发展，“慢性粒细胞白血病”的相关药品进入医保、仿制药价格不断下降，让贫苦的病人也能做到有病可医，有药可吃。 希望以后会越来越好吧，来吃个橘子先。 祝贺4天，13亿票房~]]></content>
      <tags>
        <tag>观后感</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用GitHub Pages 和 Hexo 搭建个人博客]]></title>
    <url>%2F2018%2F07%2F06%2Fhexo%2F</url>
    <content type="text"><![CDATA[最近，正好通过网络了解到可以使用 GitHub Pages 和 Hexo 搭建属于自己的个人博客空间。现在将自己的搭建过程记录使用，毕竟好记性不如烂笔头吗，也算博客的开篇吧。 本文搭建使用环境为 CentOS 7。 安装 Node.js 和 git1234567yum install gcc g++ make -ywget https://nodejs.org/dist/v8.11.3/node-v8.11.3.tar.gztar -xvf node-v* cd node-v*./configure &amp;&amp; make &amp;&amp; make installyum install git -y 安装 Hexo12npm install hexo-cli -gnpm install hexo-deployer-git --save cd 到博客的存放目录，进行初始化并新建了目录 blog ： 12cd /opt/hexo init blog cd 到新建目录 blog，进行安装npm： 12cd /opt/blog/npm install blog 目录如下图： 启动Hexo服务： 1hexo s 命令全称为 hexo server 。 就此在浏览器中打开 http://localhost:4000 ，就能开到 Hexo 测试页面。 配置 GitHub Pages为了使本地 git 与 GitHub 建立连接，需进行如下操作： 创建 SSH Key 。首先查看用户目录下，有没有 .ssh目录和.ssh目录下有无 id_rsa、id_rsa.pub 两文件。如果有请进行下一步，没有需创建 SSH Key : 1ssh-keygen -t rsa -C "此处填写备注" 此时 .ssh 目录下会生成 id_rsa、id_rsa.pub 两文件，其中 id_rsa 为私钥，d_rsa.pub 为公钥。 注册登陆 GitHub 依次点击：个人头像 -&gt; Settings -&gt; SSH and GPG kyes -&gt; New SSH key, Title：填写任意标题 Key：填写 id_rsa.pub 的内容 填写完成点击 Add SSH key 保存设置 建立 GitHub Pages 仓库新建仓库，点击 New repository 填写相关内容 对仓库进行设置，进入 Settings ，找到 GitHub Pages 设置界面 修改 Hexo 配置文件在刚建的仓库，找到 git 的提交地址，并复制。 终端 cd 到 blog 目录下，修改站点配置文件 _config.yml 1vim _config.yml 修改如下 1234deploy: type: git repository: git@github.com:wzbyron/wzbyron.github.io.git branch: master 其中 wzbyron 更换成你自己注册的用户名，且冒号: 后边都需要添加一个空格。 在 blog 文件夹目录下执行生成静态页面： 1hexo g 全称为 hexo generate 再执行配置命令，将文章部署到Github： 1hexo d 全称为 hexo deploy 命令执行成功后 ，浏览器中打开网址 https://username.github.io 即可访问博客。 安装 theme可以到Hexo官网主题页去搜寻自己喜欢的theme。这里以hexo-theme-next为例： 终端cd到 blog 目录下执行如下命令： 1git clone https://github.com/iissnan/hexo-theme-next themes/next 将blog目录下 _config.yml 里 theme 的名称 landscape 修改为 next。 NexT里有详细的使用文档。 发布文章终端 cd 到 blog 文件夹下，执行如下命令新建文章： 1hexo new "postName" postName.md 文件建在目录 /blog/source/_posts 下，postName 是文件名，为方便链接不建议掺杂汉字 文章编辑完成后，终端cd到blog文件夹下，执行如下命令来发布： 123hexo cleanhexo ghexo d hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)]]></content>
      <tags>
        <tag>GitHub Pages</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
